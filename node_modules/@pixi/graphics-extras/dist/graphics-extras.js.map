{"version":3,"file":"graphics-extras.js","sources":["../src/drawChamferRect.ts","../src/drawFilletRect.ts","../src/drawRegularPolygon.ts","../src/drawRoundedPolygon.ts","../src/drawStar.ts","../src/drawTorus.ts","../src/index.ts"],"sourcesContent":["import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with chamfer corners. These are angled corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawChamferRect\n * @param this\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} chamfer - non-zero real number, size of corner cutout\n * @returns {PIXI.Graphics} Returns self.\n */\nexport function drawChamferRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    chamfer: number): Graphics\n{\n    if (chamfer <= 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const inset = Math.min(chamfer, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n        x + inset, y,\n        right - inset, y,\n        right, y + inset,\n        right, bottom - inset,\n        right - inset, bottom,\n        x + inset, bottom,\n        x, bottom - inset,\n        x, y + inset,\n    ];\n\n    // Remove overlapping points\n    for (let i = points.length - 1; i >= 2; i -= 2)\n    {\n        if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n        {\n            points.splice(i - 1, 2);\n        }\n    }\n\n    return this.drawPolygon(points);\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with fillet corners. This is much like rounded rectangle\n * however it support negative numbers as well for the corner radius.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawFilletRect\n * @param this\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} fillet - accept negative or positive values\n * @returns {PIXI.Graphics} Returns self.\n */\nexport function drawFilletRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    fillet: number): Graphics\n{\n    if (fillet === 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const maxFillet = Math.min(width, height) / 2;\n    const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n\n    return this\n        .moveTo(x, y + size)\n        .arcTo(x + dir, y + dir, x + size, y, size)\n        .lineTo(right - size, y)\n        .arcTo(right - dir, y + dir, right, y + size, size)\n        .lineTo(right, bottom - size)\n        .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n        .lineTo(x + size, bottom)\n        .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n        .closePath();\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a regular polygon where all sides are the same length.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawRegularPolygon\n * @param this\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} radius - Polygon radius\n * @param {number} sides - Minimum value is 3\n * @param {number} rotation - Starting rotation values in radians..\n * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport function drawRegularPolygon(this: Graphics,\n    x: number,\n    y: number,\n    radius: number,\n    sides: number,\n    rotation = 0): Graphics\n{\n    sides = Math.max(sides | 0, 3);\n    const startAngle = (-1 * Math.PI / 2) + rotation;\n    const delta = (Math.PI * 2) / sides;\n    const polygon = [];\n\n    for (let i = 0; i < sides; i++)\n    {\n        const angle = (i * delta) + startAngle;\n\n        polygon.push(\n            x + (radius * Math.cos(angle)),\n            y + (radius * Math.sin(angle))\n        );\n    }\n\n    return this.drawPolygon(polygon);\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a regular polygon with rounded corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawRoundedPolygon\n * @param this\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} radius - Polygon radius\n * @param {number} sides - Minimum value is 3\n * @param {number} corner - Corner size in pixels.\n * @param {number} rotation - Starting rotation values in radians..\n * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport function drawRoundedPolygon(this: Graphics,\n    x: number,\n    y: number,\n    radius: number,\n    sides: number,\n    corner: number,\n    rotation = 0): Graphics\n{\n    sides = Math.max((sides | 0), 3);\n\n    if (corner <= 0)\n    {\n        return this.drawRegularPolygon(x, y, radius, sides, rotation);\n    }\n\n    const sideLength = (radius * Math.sin(Math.PI / sides)) - 0.001;\n\n    corner = Math.min(corner, sideLength);\n\n    const startAngle = (-1 * Math.PI / 2) + rotation;\n    const delta = (Math.PI * 2) / sides;\n    const internalAngle = ((sides - 2) * Math.PI) / sides / 2;\n\n    for (let i = 0; i < sides; i++)\n    {\n        const angle = (i * delta) + startAngle;\n        const x0 = x + (radius * Math.cos(angle));\n        const y0 = y + (radius * Math.sin(angle));\n        const a1 = angle + (Math.PI) + internalAngle;\n        const a2 = angle - (Math.PI) - internalAngle;\n        const x1 = x0 + (corner * Math.cos(a1));\n        const y1 = y0 + (corner * Math.sin(a1));\n        const x3 = x0 + (corner * Math.cos(a2));\n        const y3 = y0 + (corner * Math.sin(a2));\n\n        if (i === 0)\n        {\n            this.moveTo(x1, y1);\n        }\n        else\n        {\n            this.lineTo(x1, y1);\n        }\n        this.quadraticCurveTo(x0, y0, x3, y3);\n    }\n\n    return this.closePath();\n}\n","import { PI_2, Polygon } from '@pixi/core';\n\nimport type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a star shape with an arbitrary number of points.\n * @ignore\n */\nclass Star extends Polygon\n{\n    /**\n     * @param x - Center X position of the star\n     * @param y - Center Y position of the star\n     * @param points - The number of points of the star, must be > 1\n     * @param radius - The outer radius of the star\n     * @param innerRadius - The inner radius between points, default half `radius`\n     * @param rotation - The rotation of the star in radians, where 0 is vertical\n     */\n    constructor(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation = 0)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        super(polygon);\n    }\n}\n\n/**\n * Draw a star shape with an arbitrary number of points.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawStar\n * @param this\n * @param x - Center X position of the star\n * @param y - Center Y position of the star\n * @param points - The number of points of the star, must be > 1\n * @param radius - The outer radius of the star\n * @param innerRadius - The inner radius between points, default half `radius`\n * @param rotation - The rotation of the star in radians, where 0 is vertical\n * @returns - This Graphics object. Good for chaining method calls\n */\nexport function drawStar(this: Graphics,\n    x: number,\n    y: number,\n    points: number,\n    radius: number,\n    innerRadius: number,\n    rotation = 0): Graphics\n{\n    return this.drawPolygon(new Star(x, y, points, radius, innerRadius, rotation) as Polygon);\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a torus shape, like a donut. Can be used for something like a circle loader.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawTorus\n * @param this\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} innerRadius - Inner circle radius\n * @param {number} outerRadius - Outer circle radius\n * @param {number} [startArc=0] - Where to begin sweep, in radians, 0.0 = to the right\n * @param {number} [endArc=Math.PI*2] - Where to end sweep, in radians\n * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport function drawTorus(this: Graphics,\n    x: number,\n    y: number,\n    innerRadius: number,\n    outerRadius: number,\n    startArc = 0,\n    endArc: number = Math.PI * 2): Graphics\n{\n    if (Math.abs(endArc - startArc) >= Math.PI * 2)\n    {\n        return this\n            .drawCircle(x, y, outerRadius)\n            .beginHole()\n            .drawCircle(x, y, innerRadius)\n            .endHole();\n    }\n\n    this.finishPoly();\n    this\n        .arc(x, y, innerRadius, endArc, startArc, true)\n        .arc(x, y, outerRadius, startArc, endArc, false)\n        .finishPoly();\n\n    return this;\n}\n","/// <reference path=\"../global.d.ts\" />\nimport { Graphics } from '@pixi/graphics';\nimport { drawChamferRect } from './drawChamferRect';\nimport { drawFilletRect } from './drawFilletRect';\nimport { drawRegularPolygon } from './drawRegularPolygon';\nimport { drawRoundedPolygon } from './drawRoundedPolygon';\nimport { drawStar } from './drawStar';\nimport { drawTorus } from './drawTorus';\n\nexport interface IGraphicsExtras\n{\n    drawTorus: typeof drawTorus;\n    drawChamferRect: typeof drawChamferRect;\n    drawFilletRect: typeof drawFilletRect;\n    drawRegularPolygon: typeof drawRegularPolygon;\n    drawRoundedPolygon: typeof drawRoundedPolygon;\n    drawStar: typeof drawStar;\n}\n\n// Assign extras to Graphics\nObject.defineProperties(Graphics.prototype, {\n    drawTorus: { value: drawTorus },\n    drawChamferRect: { value: drawChamferRect },\n    drawFilletRect: { value: drawFilletRect },\n    drawRegularPolygon: { value: drawRegularPolygon },\n    drawRoundedPolygon: { value: drawRoundedPolygon },\n    drawStar: { value: drawStar },\n});\n"],"names":["Polygon","PI_2","Graphics"],"mappings":"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"}