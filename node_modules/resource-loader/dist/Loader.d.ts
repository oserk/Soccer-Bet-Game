import parseUri from 'parse-uri';
import { Signal } from 'type-signals';
import { Resource, IResourceOptions } from './Resource';
export declare namespace Loader {
    type ResourceMap = Partial<Record<string, Resource>>;
    type OnProgressSignal = (loader: Loader, resource: Resource) => void;
    type OnErrorSignal = (errMessage: string, loader: Loader, resource: Resource) => void;
    type OnLoadSignal = (loader: Loader, resource: Resource) => void;
    type OnStartSignal = (loader: Loader) => void;
    type OnCompleteSignal = (loader: Loader, resources: ResourceMap) => void;
    type MiddlewareFn = (resource: Resource, next: () => void) => void;
    type UrlResolverFn = (url: string, parsed: ReturnType<typeof parseUri>) => string;
}
export interface IAddOptions extends IResourceOptions {
    [key: string]: any;
    url: string;
    baseUrl?: string;
    name?: string;
    onComplete?: Resource.OnCompleteSignal;
    parentResource?: Resource;
}
export declare class Loader {
    static readonly DefaultMiddlewarePriority = 50;
    progress: number;
    loading: boolean;
    defaultQueryString: string;
    resources: Loader.ResourceMap;
    readonly onError: Signal<Loader.OnErrorSignal>;
    readonly onLoad: Signal<Loader.OnLoadSignal>;
    readonly onStart: Signal<Loader.OnStartSignal>;
    readonly onComplete: Signal<Loader.OnCompleteSignal>;
    readonly onProgress: Signal<Loader.OnProgressSignal>;
    private _baseUrl;
    private _urlResolvers;
    private _middleware;
    private _resourcesParsing;
    private _boundLoadResource;
    private _queue;
    constructor(baseUrl?: string, concurrency?: number);
    get baseUrl(): string;
    set baseUrl(url: string);
    add(url: string): this;
    add(name: string, url: string): this;
    add(options: IAddOptions): this;
    add(resources: (IAddOptions | string)[]): this;
    use(fn: Loader.MiddlewareFn, priority?: number): this;
    reset(): this;
    load(cb?: Loader.OnCompleteSignal): this;
    get concurrency(): number;
    set concurrency(concurrency: number);
    addUrlResolver(func: Loader.UrlResolverFn): this;
    private _prepareUrl;
    private _loadResource;
    private _onStart;
    private _onComplete;
    private _onLoad;
    private static _defaultMiddleware;
    static use(fn: Loader.MiddlewareFn, priority?: number): typeof Loader;
}
