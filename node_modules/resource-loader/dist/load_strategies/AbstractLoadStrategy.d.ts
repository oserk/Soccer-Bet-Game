import { Signal } from 'type-signals';
import { ResourceType } from '../resource_type';
export interface ILoadConfig {
    url: string;
    baseUrl?: string;
    crossOrigin?: string;
    timeout?: number;
}
export declare namespace AbstractLoadStrategy {
    type OnErrorSignal = (errMessage: string) => void;
    type OnCompleteSignal = (type: ResourceType, data: any) => void;
    type OnProgressSignal = (percent: number) => void;
}
export declare abstract class AbstractLoadStrategy<C extends ILoadConfig = ILoadConfig> {
    readonly config: C;
    readonly onError: Signal<AbstractLoadStrategy.OnErrorSignal>;
    readonly onComplete: Signal<AbstractLoadStrategy.OnCompleteSignal>;
    readonly onProgress: Signal<AbstractLoadStrategy.OnProgressSignal>;
    constructor(config: C);
    abstract load(): void;
    abstract abort(): void;
}
export declare type AbstractLoadStrategyCtor<C extends ILoadConfig = ILoadConfig> = new (config: C) => AbstractLoadStrategy<C>;
